# def func(): # ключевое слово деф, название ф-и и двоеточие
#     print('zdarova') # однако, консоль ничего не выведет/ Не обязательно принт, мб вс, что угодно
#
# def func2():
#     c = 10*10 # блок функции
#     print(c)
#
# def func3(): # пустая ф-я
#     pass # пэс говорит, что мы пропускаем
#
# func() # Это вызов функции. Только после ее вызова выводится принт
# func2()
# func3()

def func4(a, b): # указываем аргументы
    c = a * b
    print(c)
func4(3, 5) # указываем значения, они передаются в аргументы выше и затем результат функции всчитывается


def func5(f,g):
    return f + g # возвращение функции. Return хранит результат работы ф-и, но не выводит
# print(func5(int(input()), int(input()))) #   введенные значения передаются в аргументы выше и затем результат функции всчитывается

def func6(h = 5, r = 7): # вносим дефолтные значения
    return h + r
print(func6)
print(func6(10, 8)) # изменяем дефолтные значения
print(func6(h = 20))  # изменяем одно зн. вывод будет 27. Т.к. изменится только h, а r возьмется сверху, оно заданно дефолтно соот-но

# также можно добавить позиционные параметры q, s:
def func7(q, s, t = 5, y = 7):  # но их нужно добавить в вывод
    return t + y + q + s
print(func7(q = 2, s = 9))       # либо:
print(func7(4, 5))              # поменяются только q и s остальные возьмутся из ключевых сверху

# переменное количество *args, *kwargs

def func8(*args):   # * говорит о том, что позиционных параметров будет переменное количество
    print(args)
func8(1, 2, 3, 4, 5)    # выведет кортеж введенных параметров

def func8(*args, **kwargs):  # ** говорит о том, что здесь мб неограниченное кол-во ключевых аргументов. З-я будут храниться в словре
    print(args)
    print(kwargs)
func8(1, 2, 3, 4, 5, i = 1, o = 2, p = 3, v = 4)  # выводится кортеж (1-5) и словарь ('i':1,...)