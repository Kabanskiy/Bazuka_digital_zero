# i = 10
# while i > 0:
#     print(i)
#     i = i - 1
# else:
#     print('Готово')

# i = 10
# for k in str(i):
#     if k == "0":
#         break
#     print(k)
# else:
#     print('Готово')

number = 23
running = True
while running:
    guess = int(input('Введите целое число : '))
    if guess == number:
        print('Поздравляю, вы угадали.')
        running = False # это останавливает цикл
    elif guess < number:
        print('Нет, загаданное число немного больше этого.')
    else:
        print('Нет, загаданное число немного меньше этого.')
else:
    print('Цикл while закончен.')
print('Завершение.')

# В этой программе мы продолжаем играть в игру с угадыванием, но
# преимущество состоит в том, что теперь пользователь может
# угадывать до тех пор,пока не угадает правильное число, и ему не
# придётся запускать программу заново для каждой попытки, как это
# происходило до сих пор. Это наглядно демонстрирует применение
# оператора while.


# Как это работает:
# 
# Мы переместили операторы input и if внутрь цикла while и установили
# переменную running в значение True перед запуском цикла. Прежде
# всего проверяется, равно ли значение переменной running True, а
# затем происходит переход к соответствующему while-блоку. После
# выполнения этого блока команд условие, которым в данном случае
# является переменная running, проверяется снова. Если оно истинно,
# while-блок запускается снова, в противном случае происходит
# переход к дополнительному else-блоку, а затем – к следующему
# оператору.
#
# Блок else выполняется тогда, когда условие цикла while становится
# ложным (False) – это может случиться даже при самой первой
# проверке условия. Если у цикла while имеется дополнительный блок
# else, он всегда выполняется, если только цикл не будетпрерван
# оператором break.
#
# True и False называются булевым типом данных, и вы можете считать
# их эквивалентными значениям 1 и 0 соответственно.