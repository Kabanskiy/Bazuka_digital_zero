# Перевод из десятичной системи исчисления в двоичную
# В данном примере, с целью сравнения, реализованы 2 функции, которые конвертируют целое число из десятичной
# системы исчисления в его аналог в двоичной системе исчисления:
#
# Convert_10_to_2_R() — это рекурсивная функция конвертирования числа;
# Convert_10_to_2() — не рекурсивная функция.
# Для обеспечения решении задачи, в нерекурсивной версии Convert_10_to_2() вводится дополнительная переменная k,
# которая определяет порядок полученного двоичного числа. Для того, чтобы сохранять этот порядок k
# в рекурсивной версии функции Convert_10_to_2_R(), нужно его передавать в эту функцию вторым параметром.

import math

# Рекурсивная функция. Перевод числа из 10-й системы исчисления в двоичную.
# Функция возвращает результат в виде числа: 13 => 1101.
# Параметры:
# - n - число в десятичной системе исчисления;
# - k - текущий порядок (количество цифр) числа в двоичной системе.
def Convert_10_to_2_R(n, k):
    if n>0:
        t = n%2
        return Convert_10_to_2_R(n//2, k+1) + int(t*math.pow(10,k))
    else:
        return 0

# Не рекусивная функция перевода
def Convert_10_to_2(n):
    summ = 0 # сумма чисел: 5 => 100 + 0 + 1 => 101
    k = 0 # порядок числа в двоичной системе исчисления

    while n>0:
        t = n%2
        summ = summ + int(t*math.pow(10,k))
        k = k+1
        n = n//2

    return summ

# Демонстрация использования функций
res1 = Convert_10_to_2_R(126, 0) # Вызов рекурсивной функции
res2 = Convert_10_to_2(126)      # Вызов нерекурсивной функции
print("res1 = ", res1)
print("res2 = ", res2)